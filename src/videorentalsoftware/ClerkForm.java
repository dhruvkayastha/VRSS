/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package videorentalsoftware;

import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;
import java.io.*;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author dhruv
 */
public class ClerkForm extends javax.swing.JFrame {

    /**
     * Creates new form ClerkForm
     */
    public ClerkForm() {
        initComponents();
    }
    
    public ClerkForm(String empName) {
        initComponents();
        jTextEmpName.setText("Employee: " + empName);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextCustomer = new javax.swing.JTextField();
        jTextProduct = new javax.swing.JTextField();
        jButtonRent = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jCheckBox = new javax.swing.JCheckBox();
        jTextTrans = new javax.swing.JTextField();
        jButtonReturn = new javax.swing.JButton();
        jButtonInv = new javax.swing.JButton();
        jTextEmpName = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuLogout = new javax.swing.JMenuItem();
        jMenuExit = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("VRSS[Clerk]");

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setFont(new java.awt.Font("DejaVu Sans", 0, 14)); // NOI18N
        jLabel1.setText("Customer ID");

        jLabel3.setFont(new java.awt.Font("DejaVu Sans", 0, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel3.setText("Product ID");

        jTextCustomer.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextCustomerKeyTyped(evt);
            }
        });

        jTextProduct.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextProductKeyTyped(evt);
            }
        });

        jButtonRent.setFont(new java.awt.Font("DejaVu Sans", 0, 14)); // NOI18N
        jButtonRent.setText("Rent Item");
        jButtonRent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRentActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextCustomer, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                            .addComponent(jTextProduct)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(142, 142, 142)
                        .addComponent(jButtonRent, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(47, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(47, 47, 47)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 137, Short.MAX_VALUE)
                .addComponent(jButtonRent, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel4.setFont(new java.awt.Font("DejaVu Sans", 0, 14)); // NOI18N
        jLabel4.setText("Transaction ID");

        jLabel5.setFont(new java.awt.Font("DejaVu Sans", 0, 14)); // NOI18N
        jLabel5.setText("Damaged?");

        jCheckBox.setText("Yes");
        jCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxActionPerformed(evt);
            }
        });

        jTextTrans.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextTransKeyTyped(evt);
            }
        });

        jButtonReturn.setFont(new java.awt.Font("DejaVu Sans", 0, 14)); // NOI18N
        jButtonReturn.setText("Return Item");
        jButtonReturn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonReturnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(jTextTrans, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jCheckBox)
                        .addGap(84, 84, 84))))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(119, 119, 119)
                .addComponent(jButtonReturn)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextTrans, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                .addComponent(jButtonReturn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39))
        );

        jButtonInv.setFont(new java.awt.Font("DejaVu Sans", 0, 14)); // NOI18N
        jButtonInv.setText("View Inventory");
        jButtonInv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInvActionPerformed(evt);
            }
        });

        jTextEmpName.setEditable(false);
        jTextEmpName.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jTextEmpName.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jMenu1.setText("File");

        jMenuLogout.setText("Logout");
        jMenuLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuLogoutActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuLogout);

        jMenuExit.setText("Exit");
        jMenuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuExitActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuExit);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonInv, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(228, 228, 228)
                        .addComponent(jTextEmpName, javax.swing.GroupLayout.PREFERRED_SIZE, 434, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(41, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jTextEmpName, javax.swing.GroupLayout.DEFAULT_SIZE, 56, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(68, 68, 68)
                        .addComponent(jButtonInv, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuLogoutActionPerformed
        dispose();
        new VrsForm().setVisible(true);
    }//GEN-LAST:event_jMenuLogoutActionPerformed

    private void jMenuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuExitActionPerformed

    private void jButtonInvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonInvActionPerformed
        new InventoryForm().setVisible(true);
    }//GEN-LAST:event_jButtonInvActionPerformed

    private void jCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBoxActionPerformed

    private void jButtonRentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRentActionPerformed
        int custId = 0, productId = 0;
        
        try {
            custId = Integer.parseInt(jTextCustomer.getText());
        }catch(Exception e) {
            JOptionPane.showMessageDialog(null, "Invalid Customer ID", "Error", JOptionPane.ERROR_MESSAGE);
            jTextCustomer.setText(null);
        }
        try {
            productId = Integer.parseInt(jTextProduct.getText());
        }catch(Exception e) {
            JOptionPane.showMessageDialog(null, "Invalid Product ID", "Error", JOptionPane.ERROR_MESSAGE);
            jTextProduct.setText(null);
        }
        if(custId!=0 && productId!=0)
        {
            int id = 0;
            
            String sqlcust = "", sqlprod = "";
            try {
                
                Connection conn = new ConnectionHandler().createConnection();
                Statement statement = conn.createStatement();
                sqlcust = "select * from Customer";
                sqlprod = "select * from Inventory";
                
                boolean prodIsValid = false;
                boolean custIsValid = false;
                
                
                String cName = "";
                String pName = "";
                
                int music = 0;
                int video = 0;
                int isLoaned = 0;
                boolean isMusic = false;
                int rent = 0;
                
                ResultSet rsCust = statement.executeQuery(sqlcust);
                while(rsCust.next()) {
                    if(rsCust.getInt("id")==custId) {
                        custIsValid = true;
                        music = rsCust.getInt("musicRentals");
                        video = rsCust.getInt("videoRentals");
                        cName = rsCust.getString("name");
                        
                        
                        break;
                    }
                }
                
                ResultSet rsProd = statement.executeQuery(sqlprod);
                
                
                while(rsProd.next()) {
                    if(rsProd.getInt("id")==productId) {
                        prodIsValid = true;
                        isLoaned = rsProd.getInt("loaned");
                        pName = rsProd.getString("name");
                        if(rsProd.getString("type").equals("Music"))
                            isMusic = true;
                        rent = rsProd.getInt("rent");
                        
                        break;
                    }
                }
                
                if((isMusic && music>=1) || (!isMusic && video >=2)) {
                    JOptionPane.showMessageDialog(null, "Cannot rent item. Item limit reached", "Error", JOptionPane.ERROR_MESSAGE);
                }
                else if(!prodIsValid || !custIsValid) {
                    JOptionPane.showMessageDialog(null, "Invalid ID(s) entered", "Error", JOptionPane.ERROR_MESSAGE);
                }
                else {
                    String sqlSales = "select id from Sales";
                    ResultSet rsSales = statement.executeQuery(sqlSales);
                    int salesId = 0;
                    while(rsSales.next()) {
                        salesId = rsSales.getInt("id");
                    }
                    salesId++;
                    
//                    rsCust = statement.executeQuery(sqlcust);
//                    rsProd = statement.executeQuery(sqlprod);
                    
                    System.out.println("345");

                    String pQuery = "update Inventory set loaned = ? where id = ?";
                    PreparedStatement st = conn.prepareStatement(pQuery);
                    
                    st.setInt(1, 1);
                    st.setInt(2, productId);
                    st.executeUpdate();
                    st.close();
                    System.out.println("352");
                    String cQuery = "";
                    if(isMusic) {
                        music = music + 1;
                        cQuery = "update Customer set musicRentals = ? where id = ?";
                        st = conn.prepareStatement(cQuery);
                        st.setInt(1, music);
                        st.setInt(2, custId);
                        st.executeUpdate();
                        st.close();
                    }
                    else {
                        video = video + 1;
                        cQuery = "update Customer set videoRentals = ? where id = ?";
                        st = conn.prepareStatement(cQuery);
                        st.setInt(1, video);
                        st.setInt(2, custId);
                        st.executeUpdate();
                        st.close();
                    }
                    System.out.println("374");
//                    statement.executeUpdate(cQuery);
                    
                    java.sql.Date date1 = new java.sql.Date(Calendar.getInstance().getTime().getTime());
                    
                    String insert = "insert into Sales (id, loanDate, custId, itemId) values(?,?,?,?)";
                    st = conn.prepareStatement(insert);
                    
                    st.setInt(1, salesId);
                    st.setDate(2, date1);
                    st.setInt(3, custId);
                    st.setInt(4, productId);
                    
                    st.executeUpdate();
                    st.close();
                    
                    
                    JOptionPane.showMessageDialog(null, "Item rented!", "Success", JOptionPane.INFORMATION_MESSAGE);
                    String name = "";
                    
                    String details = "Transaction ID: "+ salesId + "\n\nCustomer\nName: " + cName + "\n" + "ID: " + custId + "\n\nProduct"
                            + "\nName: " + pName + "\n"
                            + "ID: " + productId + "\n\nRental Date: " + date1 + "\nDaily Rental Charge: " + rent;
                    new TransactionForm(details).setVisible(true);
                    
                    Document doc = new Document();
                    try {
                        PdfWriter.getInstance(doc, new FileOutputStream("/home/dhruv/NetBeansProjects/VideoRentalSoftware/bills/Sales Reciept " + salesId + ".pdf"));
                        doc.open();
                        Paragraph p = new Paragraph();
                        p.add(details);
                        doc.add(p);
                        doc.close();
                        
                        
                    } catch (DocumentException ex) {
                        Logger.getLogger(ClerkForm.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(ClerkForm.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
               
                
                }
                
//                Connection conn = new ConnectionHandler().createConnection();
//                Statement statement = conn.createStatement();
//                sqlcust = "select id from Customer";
//                sqlprod = "select id from Inventory";
//                ResultSet rsCust = statement.executeQuery(sqlcust);
//                ResultSet rsProd = statement.executeQuery(sqlprod);
//                
//                boolean prodIsValid = false;
//                boolean custIsValid = false;
//                
//                while(rsProd.next()) {
//                    if(rsProd.getInt("id")==productId) {
//                        prodIsValid = true;
//                        break;
//                    }
//                }
//                while(rsCust.next()) {
//                    if(rsCust.getInt("id")==custId) {
//                        custIsValid = true;
//                        break;
//                    }
//                }
//                if(custIsValid && prodIsValid) {
//                    
//                    String sqlSales = "select id from Sales";
//                    ResultSet rsSales = statement.executeQuery(sqlSales);
//                    int salesId = 0;
//                    while(rsSales.next()) {
//                        salesId = rsSales.getInt("id");
//                    }
//                    salesId++;
//                    
//                    
//                    
//                    boolean isMusic = false;
////                    while(rsProd.next()) {
////                        if(rsProd.getInt("id")==productId) {
////                        if(rsProd.getInt("loaned")==1) {
////                            JOptionPane.showMessageDialog(null, "Product is already loaned out", "Error", JOptionPane.ERROR_MESSAGE);
////                            break;
////                        }
////                        else {
////                            rsProd.updateInt("loaned", 1);
////                            if(rsProd.getString("type").equals("Music")) {
////                                isMusic = true;
////                            }
////                            
////                            while(rsSales.next()) {
////                                if(salesId == rsSales.getInt("id")) {
////                                    String input = "insert into Sales (itemId) values (" + productId +")";
////                                    statement.executeUpdate(input);
////                                }
////                            }
////                            
////                            
////                            
////                        }
////                        
////                        break;
////                        }
////                    }
//                    boolean isValid = true;
//                    while(rsSales.next() && isValid==true) {
//                        while(rsProd.next()) {
//                            if(rsProd.getInt("id")==productId) {
//                                if(rsProd.getInt("loaned")==1) {
//                                    isValid = false;
//                                    JOptionPane.showMessageDialog(null, "Product is already loaned out", "Error", JOptionPane.ERROR_MESSAGE);
//                                    break;
//                                }
//                                else {
//                                    rsProd.updateInt("loaned", 1);
//                                }
//                                if(rsProd.getString("type").equals("Music")) {
//                                    isMusic = true;
//                                }   
//                            }   
//                        }  
//                    }
//                }
//                else {
//                    JOptionPane.showMessageDialog(null, "Customer and/or Product not found!", "Error", JOptionPane.ERROR_MESSAGE);
//                }
//                
//                
//            } catch (InstantiationException ex) {
//                Logger.getLogger(ClerkForm.class.getName()).log(Level.SEVERE, null, ex);
//            } catch (IllegalAccessException ex) {
//                Logger.getLogger(ClerkForm.class.getName()).log(Level.SEVERE, null, ex);
//            } catch (SQLException ex) {
//                Logger.getLogger(ClerkForm.class.getName()).log(Level.SEVERE, null, ex);
//            }
//            
            } catch (SQLException ex) {
                Logger.getLogger(ClerkForm.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InstantiationException ex) {
                Logger.getLogger(ClerkForm.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IllegalAccessException ex) {
                Logger.getLogger(ClerkForm.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }
        
    }//GEN-LAST:event_jButtonRentActionPerformed

    public int getRent(int itemId) {
        int rent = 0;
        
        try {
            Connection conn = new ConnectionHandler().createConnection();
            Statement st = conn.createStatement();
            
            String query = "select * from Inventory where id = " + itemId;
            
            ResultSet rs = st.executeQuery(query);
            
            if(rs.next())
            {
                rent = rs.getInt("rent");
            }
            return rent;
            
        } catch (SQLException ex) {
            Logger.getLogger(ClerkForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(ClerkForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(ClerkForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        return 0;
    }
    
    public String getName(int itemId) {
        String name = "";
        
        try {
            Connection conn = new ConnectionHandler().createConnection();
            Statement st = conn.createStatement();
            
            String query = "select * from Inventory where id = " + itemId;
            
            ResultSet rs = st.executeQuery(query);
            
            if(rs.next())
            {
                name = rs.getString("name");
            }
            return name;
            
        } catch (SQLException ex) {
            Logger.getLogger(ClerkForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(ClerkForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(ClerkForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        return name;
    }
    
    public String getType(int itemId) {
        String type = "";
        
        try {
            Connection conn = new ConnectionHandler().createConnection();
            Statement st = conn.createStatement();
            
            String query = "select * from Inventory where id = " + itemId;
            
            ResultSet rs = st.executeQuery(query);
            
            if(rs.next())
            {
                type = rs.getString("type");
            }
            return type;
            
        } catch (SQLException ex) {
            Logger.getLogger(ClerkForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(ClerkForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(ClerkForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        return type;
    }
            
        
    private void jButtonReturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonReturnActionPerformed
        int transId = 0, custId = 0,  productId = 0;
        try {
            transId = Integer.parseInt(jTextTrans.getText());
        }catch(Exception e) {
            JOptionPane.showMessageDialog(null, "Invalid Transaction ID", "Error", JOptionPane.ERROR_MESSAGE);
            jTextTrans.setText(null);
        }
        
        try {
            Connection conn = new ConnectionHandler().createConnection();
            Statement st = conn.createStatement();
            
            String query = "select * from Sales";
            
            ResultSet rs = st.executeQuery(query);
            
            int flag = 0;
            boolean isValid = false;
            boolean ret = false;
            
            while(rs.next()) {
                
                if(transId==rs.getInt("id")) {
                    isValid = true;
                    if(rs.getDate("returnDate")!=null) {
                        JOptionPane.showMessageDialog(null, "Item has already been returned", "Error", JOptionPane.ERROR_MESSAGE);
                        ret = true;
                        break;
                    }
                    break;
                }
            }
            
            if(!isValid) {
                if(!ret)
                    JOptionPane.showMessageDialog(null, "Transaction not found", "Error", JOptionPane.ERROR_MESSAGE);
            }
            else if(!ret){
                
                boolean damaged = jCheckBox.isSelected();
                String cName = "";
                String pName = "";
                
                String salesQ = "select * from Sales where id = ?" ;
                PreparedStatement pst2 = conn.prepareStatement(salesQ);
                pst2.setInt(1, transId);
                ResultSet rs2 = pst2.executeQuery();
                
                rs2.first();

                custId = rs2.getInt("custId");
                productId = rs2.getInt("itemId");
                java.sql.Date lDate = rs2.getDate("loanDate");
                java.sql.Date rDate = new java.sql.Date(Calendar.getInstance().getTime().getTime());

                String productQ = "select * from Inventory where id = " + productId;
                rs = st.executeQuery(productQ);
                
                rs.first();
                
                java.sql.Date purchaseDate = rs.getDate("purchaseDate");
                
                int rent = rs.getInt("rent");
                
                boolean updateRent = false;
                if((lDate.getTime() - purchaseDate.getTime())/(86400000*365) >= 1) {
                    rent/=2;
                    updateRent = true;
                }
                
                String type = rs.getString("type");
                
                if(updateRent) {
                    String upd = "update Inventory set rent = rent/2 where id = ?";
                    PreparedStatement pst = conn.prepareStatement(upd);
                    pst.setInt(1, productId);
                    pst.executeUpdate();
                    pst.close();
                }
                
                
                
                int totalCost = 0;
                long difference =  (rDate.getTime()-lDate.getTime());
                int noOfDays = (int)difference/86400000 + 1;
                System.out.println("noOfDays = " + noOfDays);
                if(!damaged) {
                    
                    totalCost = noOfDays*rent;
                                        
                    String pQuery = "update Inventory set loaned = ? where id = ?";
                    PreparedStatement pst = conn.prepareStatement(pQuery);

                    pst.setInt(1, 0);
                    pst.setInt(2, productId);
                    pst.executeUpdate();
                    pst.close();
                }
                else {
                    totalCost = rs.getInt("price");
                    String deleteQ = "delete from Inventory where id = " + productId;
                    st.executeUpdate(deleteQ);
                }
                String updCust = "";
                
                if("Music".equals(type)) {
                    updCust = "update Customer set musicRentals = ? where id = ?";
                    PreparedStatement pst = conn.prepareStatement(updCust);
                    
                    pst.setInt(1, 0);
                    pst.setInt(2, custId);
                    pst.executeUpdate();
                    pst.close();    
                }
                else {
                    int video = 0;
                    String custQ = "select videoRentals from Customer where id = ?";
                    PreparedStatement pst = conn.prepareStatement(custQ);
                    
                    pst.setInt(1, custId);
                    rs = pst.executeQuery();
                    
                    rs.first();
                    
                    video = rs.getInt("videoRentals");
                    
                    pst.close();
                    
                    updCust = "update Customer set musicRentals = ? where id = ?";
                    pst = conn.prepareStatement(updCust);
                    
                    pst.setInt(1, video-1);
                    pst.setInt(2, custId);
                    pst.executeUpdate();
                    pst.close();
                }
                String updSales = "update Sales set totalCost = ?, returnDate = ? where id = ?";
                PreparedStatement pst = conn.prepareStatement(updSales);
                
                pst.setInt(1, totalCost);
                pst.setDate(2, rDate);
                pst.setInt(3, transId);
                pst.executeUpdate();
                pst.close();
                
                String updIncome = "update Profit set Income = Income + ?";
                
                pst = conn.prepareStatement(updIncome);
                
                pst.setInt(1, totalCost);
                pst.executeUpdate();
                pst.close();
                
                JOptionPane.showMessageDialog(null, "Item returned!", "Success", JOptionPane.INFORMATION_MESSAGE);
                
                String cond = damaged?"Bad":"Good";
                
                query = "select name from Customer where id = ?";
                pst = conn.prepareStatement(query);
                pst.setInt(1, custId);
                rs = pst.executeQuery();
                
                rs.first();
                
                cName = rs.getString("name");
                
                query = "select name from Inventory where id = ?";
                pst = conn.prepareStatement(query);
                pst.setInt(1, productId);
                rs = pst.executeQuery();
                
                rs.first();
                
                pName = rs.getString("name");
                

                new TransactionForm("Transaction ID: "+ transId + "\n\nCustomer\nName: " + cName + "\n" + "ID: " + custId + "\n\nProduct"
                        + "\nName: " + pName + "\n"
                        + "ID: " + productId + "\n\nRental Date: " + lDate + "\nDaily Rental Charge: " + rent + "\n\nReturnDate: " + rDate
                        + "\nReturn Condition: " + cond + "\n\nTotal Cost: Rs. " + totalCost).setVisible(true);
                
                Document doc = new Document();
                    try {
                        PdfWriter.getInstance(doc, new FileOutputStream("/home/dhruv/NetBeansProjects/VideoRentalSoftware/bills/Sales_Reciept_" + transId + ".pdf"));
                        doc.open();
                        Paragraph p = new Paragraph();
                        p.add("Transaction ID: "+ transId + "\n\nCustomer\nName: " + cName + "\n" + "ID: " + custId + "\n\nProduct"
                        + "\nName: " + pName + "\n"
                        + "ID: " + productId + "\n\nRental Date: " + lDate + "\nDaily Rental Charge: " + rent + "\n\nReturnDate: " + rDate
                        + "\nReturn Condition: " + cond + "\n\nTotal Cost: Rs. " + totalCost);
                        doc.add(p);
                        doc.close();
                        
                        
                    } catch (DocumentException ex) {
                        Logger.getLogger(ClerkForm.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(ClerkForm.class.getName()).log(Level.SEVERE, null, ex);
                    }
               
                
            }
            
            
            
        } catch (InstantiationException ex) {
            Logger.getLogger(ClerkForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(ClerkForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ClerkForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
//        boolean damaged = jCheckBox.isSelected();
//        String returnCondition = (!damaged?"Good":"Damaged");
//        int cost = 0, rent = 0;
//        new TransactionForm("Customer\nName:" + "\n" + "ID: " + custId + "\n\nProduct\nName: " + "\n"
//                + "ID: " + productId + "\n\nRental Date: " + new Date().toString() + "\n"
//                + "Daily Rental Charge: " + rent + "\nReturnDate: " + new Date().toString() + "\nReturn Conditon: " + returnCondition
//                + "\nTOTAL COST: " + cost).setVisible(true);
        
        
    }//GEN-LAST:event_jButtonReturnActionPerformed

    private void jTextTransKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextTransKeyTyped
        char c = evt.getKeyChar();
        
        
        if(!(Character.isDigit(c)))
        {
            evt.consume();
        }
    }//GEN-LAST:event_jTextTransKeyTyped

    private void jTextProductKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextProductKeyTyped
        char c = evt.getKeyChar();

        if(!(Character.isDigit(c)))
        {
            evt.consume();
        }
    }//GEN-LAST:event_jTextProductKeyTyped

    private void jTextCustomerKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextCustomerKeyTyped
        char c = evt.getKeyChar();

        if(!(Character.isDigit(c)))
        {
            evt.consume();
        }
    }//GEN-LAST:event_jTextCustomerKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClerkForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClerkForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClerkForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClerkForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClerkForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonInv;
    private javax.swing.JButton jButtonRent;
    private javax.swing.JButton jButtonReturn;
    private javax.swing.JCheckBox jCheckBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuExit;
    private javax.swing.JMenuItem jMenuLogout;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField jTextCustomer;
    private javax.swing.JTextField jTextEmpName;
    private javax.swing.JTextField jTextProduct;
    private javax.swing.JTextField jTextTrans;
    // End of variables declaration//GEN-END:variables
}
